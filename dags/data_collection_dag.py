# dags/data_collection_dag.py
import json  # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from datetime import datetime, timedelta

from airflow.decorators import dag, task
from airflow.operators.bash import BashOperator


@dag(
    dag_id="process_avito_ads",
    description="DAG –¥–ª—è —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å Avito.",
    schedule_interval=None,
    start_date=datetime(2023, 1, 1),
    catchup=False,
    tags=["avito", "data-collection"],
        default_args={
        'retries': 2,
        'retry_delay': timedelta(minutes=5),
    }
)
def process_avito_ads_dag():
    gather_data_task = BashOperator(
        task_id="gather_data_task",
        bash_command='PYTHONPATH="/opt/airflow" python /opt/airflow/src/core/worker.py --pages 59',
        do_xcom_push=True,
    )

    #    backfill_data_task = BashOperator(
    #        task_id='backfill_data_task',
    #        bash_command='PYTHONPATH="/opt/airflow" python /opt/airflow/src/core/worker.py --sort',
    #        do_xcom_push=True,
    #    )

    @task
    def send_notifications_task(ads_json_str: str):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏, –ø–∞—Ä—Å–∏—Ç –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        import sys

        sys.path.insert(0, "/opt/airflow")
        # –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ Python-–æ–±—ä–µ–∫—Ç
        try:
            new_ads = json.loads(ads_json_str)
        except (json.JSONDecodeError, TypeError):
            new_ads = []

        if not new_ads:
            print("–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
            return

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {len(new_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

        import sys

        sys.path.insert(0, "/opt/airflow/src")
        from src.core.sender import send_telegram_message

        for ad in new_ads:
            message = (
                f"<b>üî• –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')} üî•</b>\n\n"
                f"<b>–¶–µ–Ω–∞:</b> {ad.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
                f"<a href='{ad.get('url', '#')}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
            )
            send_telegram_message(message)

    gather_data_task

    # –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π
    # send_notifications_task(gather_data_task.output)


process_avito_ads_dag()
