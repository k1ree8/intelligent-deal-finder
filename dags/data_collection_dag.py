# dags/data_collection_dag.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import json
from datetime import datetime, timedelta

from airflow.decorators import dag, task
from airflow.operators.bash import BashOperator
# <-- –£–î–ê–õ–ò–õ–ò –ò–ú–ü–û–†–¢ 'settings' –û–¢–°–Æ–î–ê -->


def get_schedule_from_config():
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò DAG,
    —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    import sys
    sys.path.insert(0, "/opt/airflow") # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
    from src.core.config import settings
    return settings.get_schedule_interval()


@dag(
    dag_id="process_avito_ads",
    description="DAG –¥–ª—è —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ù–û–í–´–• –í–´–ì–û–î–ù–´–• –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å Avito.",
    schedule_interval=get_schedule_from_config(), # <-- –¢–ï–ü–ï–†–¨ –ü–û–õ–£–ß–ê–ï–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï –¢–ê–ö
    start_date=datetime(2023, 1, 1),
    catchup=False,
    tags=["avito", "data-collection", "ml"],
    default_args={
        'retries': 2,
        'retry_delay': timedelta(minutes=5),
    }
)
def process_avito_ads_dag():
    gather_data_task = BashOperator(
        task_id="gather_data_task",
        bash_command='PYTHONPATH="/opt/airflow" python /opt/airflow/src/core/worker.py',
        do_xcom_push=True,
    )

    @task
    def predict_and_filter_task(all_new_ads_json: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–≥–æ–¥–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
        """
        import sys
        sys.path.insert(0, "/opt/airflow") # <-- –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å —É–∂–µ –±—ã–ª –∏ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        from src.ml.predictor import predict_and_filter

        try:
            new_ads = json.loads(all_new_ads_json)
        except (json.JSONDecodeError, TypeError):
            new_ads = []

        if not new_ads:
            return json.dumps([])

        profitable_ads = predict_and_filter(new_ads)
        return json.dumps(profitable_ads, default=str)


    @task
    def send_notifications_task(profitable_ads_json: str):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É —Å –í–´–ì–û–î–ù–´–ú–ò –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        import sys
        sys.path.insert(0, "/opt/airflow") # <-- –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å —É–∂–µ –±—ã–ª –∏ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        from src.core.sender import send_telegram_message

        try:
            profitable_ads = json.loads(profitable_ads_json)
        except (json.JSONDecodeError, TypeError):
            profitable_ads = []

        if not profitable_ads:
            print("–í—ã–≥–æ–¥–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
            return

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {len(profitable_ads)} –í–´–ì–û–î–ù–´–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        
        for ad in profitable_ads:
            profit = int(ad.get('profit', 0))
            predicted_price = int(ad.get('predicted_price', 0))
            
            message = (
                f"<b>üî•üî•üî• –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üî•üî•üî•</b>\n\n"
                f"<b>{ad.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</b>\n\n"
                f"<b>–¶–µ–Ω–∞:</b> {ad.get('price', 'N/A')} —Ä—É–±.\n"
                f"<b>–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞:</b> {predicted_price} —Ä—É–±.\n"
                f"<b>üí• –í–´–ì–û–î–ê: ~{profit} —Ä—É–±. üí•</b>\n\n"
                f"<a href='{ad.get('url', '#')}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
            )
            send_telegram_message(message)

    all_ads = gather_data_task.output
    profitable_ads = predict_and_filter_task(all_ads)
    send_notifications_task(profitable_ads)


process_avito_ads_dag()